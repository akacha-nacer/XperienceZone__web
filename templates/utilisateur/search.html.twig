{% extends 'utilisateur/base.html.twig' %}

{% block title %}Search Users{% endblock %}

{% block container %}
    <style>
        /* Votre style CSS */
         .suggestion {
            padding: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .suggestion:hover {
            background-color: #f9f9f9;
        }
    </style>

    <h1>Search Users</h1>
<div style="display: flex; align-items: center;">
    <form id="searchForm">
                        <div class="search hidden sm:block">
        <input type="text" class="search__input form-control border-transparent" id="searchInput" placeholder="Search for a user...">
                            <i data-lucide="search" class="search__icon dark:text-slate-500"></i> 
                        </div>
    </form>
    <a href="{{ path('app_utilisateur_index') }}" class="btn btn-primary py-3 px-4 w-full xl:w-32 xl:mr-3 align-top">back to list</a>
</div>

    <div id="suggestions"></div>
    <div id="userDetails"></div>

    <script>
        const searchInput = document.getElementById('searchInput');
        const suggestionsDiv = document.getElementById('suggestions');
        const userDetailsDiv = document.getElementById('userDetails');

        suggestionsDiv.addEventListener('click', function(event) {
            if (event.target && event.target.nodeName === 'DIV') {
                const selectedSuggestion = event.target;
                const userId = selectedSuggestion.dataset.userId;

                fetch(`/utilisateur/details/${userId}`)
                    .then(response => response.text())
                    .then(detailsHtml => {
                        userDetailsDiv.innerHTML = detailsHtml;
                    });

                searchInput.value = selectedSuggestion.textContent;
                searchInput.focus(); // Focus on the search input after selection

                performSearch(searchInput.value.trim());
            }
        });

        searchInput.addEventListener('input', function() {
            const searchString = searchInput.value.trim();

            if (searchString === '') {
                suggestionsDiv.innerHTML = ''; // Clear suggestions if the input is empty
                return; // Stop the function to avoid empty searches
            }

            fetch(`/utilisateur/search?q=${searchString}`)
                .then(response => response.json())
                .then(data => {
                    suggestionsDiv.innerHTML = '';
                    data.users.forEach(user => {
                        const suggestion = document.createElement('div');
                        suggestion.textContent = user.username;
                        suggestion.classList.add('suggestion');
                        suggestion.dataset.userId = user.idUser;

                        suggestionsDiv.appendChild(suggestion);
                    });
                });
        });

        function performSearch(searchString) {
            fetch(`/utilisateur/search?q=${searchString}`)
                .then(response => response.json())
                .then(data => {
                    // Logic to handle the search response
                    // ...

                    // For example, display the data in the console
                    console.log(data);
                });
        }
    </script>
{% endblock %}
